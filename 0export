#!/usr/bin/env python
# Copyright (C) 2008, Thomas Leonard
# See the README file for details, or visit http://0install.net.

from optparse import OptionParser
import os, sys, tempfile, shutil, tarfile
from logging import warn, info, debug

ZEROINSTALL_URI = "http://0install.net/2007/interfaces/ZeroInstall.xml"

zeroinstall_dir = os.environ.get('0EXPORT_ZEROINSTALL', None)
if zeroinstall_dir:
	sys.path.insert(1, zeroinstall_dir)

version = '0.1'

extract_header = """#!/bin/sh
# 0export %s
archive_offset=00000
archive_format=application/x-bzip-compressed-tar
exec python - "$0" "$archive_offset" << EOF
import tempfile, tarfile, sys, shutil, os
tmp = tempfile.mkdtemp(prefix = '0export-')
try:
	self_stream = file(sys.argv[1], 'rb')
	self_stream.seek(int(sys.argv[2]))
	ts = tarfile.open(sys.argv[1], 'r|bz2', self_stream)

	umask = os.umask(0)
	os.umask(umask)
	items = []
	for tarinfo in ts:
		tarinfo.mode = (tarinfo.mode | 0644) & ~umask
		ts.extract(tarinfo, tmp)
		if tarinfo.isdir():
			items.append(tarinfo)
	for tarinfo in items:
		path = os.path.join(tmp, tarinfo.name)
		os.utime(path, (tarinfo.mtime, tarinfo.mtime))

	ts.close()
	self_stream.close()
	sys.path.insert(0, tmp)
	sys.argv[0] = os.path.join(tmp, 'install.py')
	import install
finally:
	shutil.rmtree(tmp)
EOF
exit 1
""" % version
extract_header = extract_header.replace('00000', "%05d" % len(extract_header))

parser = OptionParser(usage="usage: %prog setup.sh URI...\n"
			"Create setup.sh self-extracting installer for program(s) URI...")

parser.add_option("-v", "--verbose", help="more verbose output", action='count')
parser.add_option("-V", "--version", help="display version information", action='store_true')

(options, args) = parser.parse_args()

if options.version:
	print "0export (zero-install) " + version
	print "Copyright (C) 2008 Thomas Leonard"
	print "This program comes with ABSOLUTELY NO WARRANTY,"
	print "to the extent permitted by law."
	print "You may redistribute copies of this program"
	print "under the terms of the GNU General Public License."
	print "For more information about these matters, see the file named COPYING."
	sys.exit(0)

if options.verbose:
	import logging
	logger = logging.getLogger()
	if options.verbose == 1:
		logger.setLevel(logging.INFO)
	else:
		logger.setLevel(logging.DEBUG)

if len(args) < 2:
	parser.print_help()
	sys.exit(1)

from zeroinstall import support
from zeroinstall.zerostore import BadDigest
from zeroinstall.injector import policy, handler, model
from zeroinstall import SafeException
import utils

setup_file = args[0]
uris = [model.canonical_iface_uri(x) for x in args[1:]]

try:
	h = handler.Handler()

	feeds_used = set()		# URI
	implementations_used = set()	# ID

	for uri in [ZEROINSTALL_URI] + uris:
		print "Choosing versions for %s..." % uri

		p = policy.Policy(uri, h)

		# Don't let us choose local devel versions
		p.solver.extra_restrictions = utils.NoLocalRestrictions()

		solved = p.solve_with_downloads()
		h.wait_for_blocker(solved)

		if not p.ready:
			raise SafeException("Failed to select a set of versions!")

		for iface, impl in p.solver.selections.items():
			print "  %-10s : %s" % (iface.get_name(), impl.get_version())
			implementations_used.add(impl.id)
		feeds_used = feeds_used | p.solver.feeds_used

		downloads = p.download_uncached_implementations()
		if downloads:
			print "Downloading implementations..."
			h.wait_for_blocker(downloads)

		if uri == ZEROINSTALL_URI:
			zeroinstall_impl = p.solver.selections[p.solver.iface_cache.get_interface(uri)].id
	uri = None
	p = None

	keys_used = set()

	tmp = tempfile.mkdtemp(prefix = '0export-')
	try:
		utils.export_feeds(tmp, feeds_used, keys_used)
		utils.export_impls(tmp, implementations_used)

		os.symlink(os.path.join('implementations', zeroinstall_impl), os.path.join(tmp, 'zeroinstall'))

		keys_dir = os.path.join(tmp, 'keys')
		os.mkdir(keys_dir)
		for key in keys_used:
			utils.export_key(key, keys_dir)

		mydir = os.path.dirname(os.path.abspath(sys.argv[0]))
		shutil.copyfile(os.path.join(mydir, 'install.py'),
				os.path.join(tmp, 'install.py'))

		toplevels = file(os.path.join(tmp, 'toplevel_uris'), 'w')
		for uri in uris:
			toplevels.write(uri + '\n')
		toplevels.close()

		setup_stream = file(setup_file, 'w')
		setup_stream.write(extract_header)
		ts = tarfile.open(setup_file, 'w|bz2', setup_stream)
		ts.add(tmp, '.')
		ts.close()
		setup_stream.close()
		os.chmod(setup_file, (os.stat(setup_file).st_mode & 0777) | 0111)
	finally:
		support.ro_rmtree(tmp)
except BadDigest, ex:
	print >>sys.stderr, str(ex)
	if ex.detail:
		print >>sys.stderr, ex.detail
	sys.exit(1)
except SafeException, ex:
	print >>sys.stderr, str(ex)
	sys.exit(1)
